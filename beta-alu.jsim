//.include "/JSIM/stdcell.jsim"
//.include "/JSIM/nominal.jsim"
//.include "/lab3/lab3checkoff_6.jsim"


*Partial Full Adder: inputs (a,b,c) outputs (p,g,s)
.subckt PFA a b c p g q s
Xxor1 a b p xor2
Xor1 a b q or2
Xxor2 p c s xor2
Xand1 a b g and2
.ends

*4_block carry lookahead adder: inputs (c0,a,b) outputs (P_out,G_out)
.subckt CLA_add4 a[3:0] b[3:0] c0 s[3:0] P_out G_out Z_out
Xa2_1 p0 c0 i0 and2
Xa2_2 p1 g0 i1 and2
Xa2_3 p2 g1 i3 and2
Xa2_4 p3 g2 i6 and2
Xa3_1 p1 p0 c0 i2 and3
Xa3_2 p2 p1 g0 i4 and3
Xa3_3 p3 p2 g1 i7 and3
Xa4_1 p2 p1 p0 c0 i5 and4
Xa4_2 p3 p2 p1 p0 P_out and4
Xa4_3 p3 p2 p1 g0 i8 and4
Xo2_1 g0 i0 c1 or2
Xo3_1 g1 i1 i2 c2 or3
Xo4_1 g2 i3 i4 i5 c3 or4
Xo4_2 g3 i6 i7 i8 G_out or4
Xpfa_set a[3:0] b[3:0] c[3:0] p[3:0] g_pre[3:0] q[3:0] s[3:0] PFA


//Xbuffa a[3:0] ap[3:0] buffer_4
Xbuffg g_pre[3:0] g[3:0] buffer_4
//Xbuffp p_pre[3:0] p[3:0] buffer_4

Xz_xor1 p[3:1] q[2:0] f[3:1] xor2
Xz_xor4 p0 c0 f0 xor2

Xz_nor1 f[3:0] m[1:0] nor2
Xz_and1 m[1:0] Z_out and2

.ends

*4_block carry lookahead logic: inputs (c0,a,b) outputs (P_out,G_out)
.subckt CLA_block4 c0 c1 c2 c3 p[3:0] g[3:0] P_out G_out z[3:0] zq
Xa2_1 p0 c0 i0 and2
Xa2_2 p1 g0 i1 and2
Xa2_3 p2 g1 i3 and2
Xa2_4 p3 g2 i6 and2
Xa3_1 p1 p0 c0 i2 and3
Xa3_2 p2 p1 g0 i4 and3
Xa3_3 p3 p2 g1 i7 and3
Xa4_1 p2 p1 p0 c0 i5 and4
Xa4_2 p3 p2 p1 p0 P_out and4
Xa4_3 p3 p2 p1 g0 i8 and4
Xo2_1 g0 i0 c1 or2
Xo3_1 g1 i1 i2 c2 or3
Xo4_1 g2 i3 i4 i5 c3 or4
Xo4_2 g3 i6 i7 i8 G_out or4

Xz_and4 z[3:0] zq and4
.ends

*2_block carry lookahead logic: inputs (c0, p[1:0] g[1:0]) outputs c[2:1] P, G
.subckt CLA_block2 c[1:0] p[1:0] g[1:0] P G z1[1:0] Z
Xa2_1 c0 p0 i1 and2
Xo2_1 g0 i1 c1 or2
Xa2_2 p1 g0 i2 and2
Xa3_1 p1 p0 c0 i3 and3
Xo3_1 g1 i2 i3 G or3
Xa2_3 p0 p1 P and2
Xz_and2 z1[1:0] Z and2
.ends


*calculate V  XA31*XB31*~S31 + ~XA31*~XB31*S31
.subckt V_calc A B S V
Xinv1 A A_inv inverter
Xinv2 B B_inv inverter
Xinv3 S S_inv inverter
*Xand3_1 A B S_inv out1 and3
*Xand3_2 A_inv B_inv S out2 and3
*Xor2_1 out1 out2 V or2
Xnand1 A B S_inv out1 nand3
Xnand2 A_inv B_inv S out2 nand3
Xnand3 out1 out2 V nand2
.ends


*output carry circuit (OC) inputs (P, G, c0) outputs (c_out)
.subckt OC P G c0 c_out
Xa1_2 P c0 i1 and2
Xo1_2 G i1 c_out or2
.ends

.subckt BOOL alufn[3:0] A[31:0] B[31:0] OUT[31:0]
Xbool A[31:0] B[31:0] alufn[0]#32 alufn[1]#32 alufn[2]#32 alufn[3]#32 OUT[31:0] mux4 
.ends


*32_bit Arithmetic Unit: inputs (A[31:0] B[31:0],ALUFN0) outputs (S[31:0], Z,V,N)
.subckt  ARITH alufn[1:0] A[31:0] B[31:0] OUT[31:0] Z V N
Xsubxor B[31:0] alufn0#32 Bi[31:0] xor2
.connect alufn[0] c0

Xcla_add1 A[3:0] Bi[3:0] c0 OUT[3:0] p0 g0 z0 CLA_add4
Xcla_add2 A[7:4] Bi[7:4] c1 OUT[7:4] p1 g1 z1 CLA_add4
Xcla_add3 A[11:8] Bi[11:8] c2 OUT[11:8] p2 g2 z2 CLA_add4
Xcla_add4 A[15:12] Bi[15:12] c3 OUT[15:12] p3 g3 z3 CLA_add4
Xcla_add5 A[19:16] Bi[19:16] c4 OUT[19:16] p4 g4 z4 CLA_add4
Xcla_add6 A[23:20] Bi[23:20] c5 OUT[23:20] p5 g5 z5 CLA_add4
Xcla_add7 A[27:24] Bi[27:24] c6 OUT[27:24] p6 g6 z6 CLA_add4
Xcla_add8 A[31:28] Bi[31:28] c7 OUT[31:28] p7 g7 z7 CLA_add4

*Z checking added
Xcla_block4_1 c0 c1 c2 c3 p[3:0] g[3:0] P_out1 G_out1 z[3:0] z1[1] CLA_block4
Xcla_block4_2 c4 c5 c6 c7 p[7:4] g[7:4] P_out2 G_out2 z[7:4] z1[0] CLA_block4
Xcla_block2_1 c4 c0 P_out2 P_out1 G_out2 G_out1 P_final G_final z1[1:0] Z CLA_block2

Xoc P_final G_final c0 c_final OC

Xv_calc A31 Bi31 OUT31 V V_calc
Xn_calc OUT31 N buffer

.ends


*32_bit shifter
.subckt SHIFT alufn[1:0] A[31:0] B[31:0] OUT[31:0]
Xbbuff B[4:0] bbuff[4:0] buffer_4
Xrsign_s alufn[1] 0 A[31] GND_pre mux2
Xgndbuf GND_pre GND buffer_4
Xsreverse alufn[0]#32 A[31:0] A[0:31] Asel[31:0] mux2
Xabuff Asel[31:0] Abuff[31:0] buffer_2
X16_mux bbuff[4]#32 Abuff[31:0] Abuff[15:0] GND#16 16muxo[31:0] mux2
X8_mux bbuff[3]#32 16muxo[31:0] 16muxo[23:0] GND#8 8muxo[31:0] mux2
X4_mux bbuff[2]#32 8muxo[31:0] 8muxo[27:0] GND#4 4muxo[31:0] mux2
X2_mux bbuff[1]#32 4muxo[31:0] 4muxo[29:0] GND#2 2muxo[31:0] mux2
X1_mux bbuff[0]#32 2muxo[31:0] 2muxo[30:0] GND muxo[31:0] mux2
Xereverse alufn[0]#32 muxo[31:0] muxo[0:31] OUT[31:0] mux2 
.ends

*32bit comparator
.subckt CMP alufn[3] alufn[1] Z V N OUT[31:0]
.connect OUT[31:1] 0
Xxor N V nv xor2
Xor Z nv no or2
Xmux4 alufn[3] alufn[1] Z no nv Z OUT[0] mux4
.ends

*Full ALU implementation
.subckt alu alufn[4:0] a[31:0] b[31:0] out[31:0] z v n


*** Generate outputs from each of BOOL, SHIFT, ARITH< CMP subcircuits:
Xbool alufn[3:0] a[31:0] b[31:0] boolout[31:0] BOOL
Xshift alufn[1:0] a[31:0] b[31:0] shiftout[31:0] SHIFT
Xarith alufn[1:0] a[31:0] b[31:0] arithout[31:0] z v n ARITH
Xcmp alufn[3] alufn[1] z v n cmpout[31:0] CMP

*** Combine them, using 4 multiplexors:
Xmux1 alufn[4]#32 nonbool[31:0] boolout[31:0] out[31:0] mux2
Xmux2 alufn[2]#32 arithshift[31:0] cmpout[31:0] nonbool[31:0] mux2
Xmux3 alufn[3]#32 arithout[31:0] shiftout[31:0] arithshift[31:0] mux2
.ends



