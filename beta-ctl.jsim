// .include "/jsim/nominal.jsim"
// .include "/jsim/stdcell.jsim"
// .include "/lab6ctl.jsim"

.subckt ctl reset op_c[5:0] ra2sel bsel alufn[4:0] wdsel[1:0] werf moe wr z pcsel[2:0] wasel asel


Xctl vdd 0 0 op_c[5:0]   // one read port
	+ alufn[4:0] werf bsel wdsel[1:0] xwr ra2sel pc_calc[2:0] asel wasel moe
	+ $memory width=17 nlocations=64
	+ contents = (
		+ 0b00000_1_0_00_0_0_100_0_1_0  // bit 0   used by IRQ interrupt
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 1 
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 2
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 3
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 4
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 5
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 6
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 7
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 8
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 9
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 10
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 11
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 12
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 13
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 14
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 15
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 16
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 17
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 18
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 19
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 20
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 21
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 22
		+ 0b00000_1_0_00_0_0_011_0_1_0  // bit 23
		+ 0b00000_1_1_10_0_0_000_0_0_1 // bit 24  LD
		+ 0b00000_0_1_01_1_1_000_0_0_0// bit 25   ST
		+ 0b00000_1_0_00_0_0_011_0_1_0 // bit 26
		+ 0b00000_1_0_00_0_0_010_0_0_0 // bit 27 JMP 
		+ 0b00000_1_1_00_0_0_000_1_0_0 // bit 28 BEQ  bsel = 1, asel = 1, alufn Add
		+ 0b00000_1_1_00_0_0_000_1_0_0 // bit 29 BNE  bsel = 1, asel = 1, alufn Add
		+ 0b00000_1_0_00_0_0_011_0_1_0 // bit 30
		+ 0b00000_1_1_10_0_0_000_1_0_1 // bit 31 LDR  bsel = 1 asel = 1, alufn = ADD 
		+ 0b00000_1_0_01_0_0_000_0_0_0 // bit 32 ADD
		+ 0b00001_1_0_01_0_0_000_0_0_0 // bit 33 SUB
		+ 0b00000_1_0_00_0_0_011_0_1_0 // bit 34 MUL (not used)
		+ 0b00000_1_0_00_0_0_011_0_1_0 // bit 35 DIV (not used)
		+ 0b00101_1_0_01_0_0_000_0_0_0 // bit 36 CMPEQ
		+ 0b00111_1_0_01_0_0_000_0_0_0 // bit 37 CMPLT
		+ 0b01101_1_0_01_0_0_000_0_0_0 // bit 38 CMPLE
		+ 0b00000_1_0_00_0_0_011_0_1_0 // bit 39 
		+ 0b11000_1_0_01_0_0_000_0_0_0 // bit 40 AND
		+ 0b11110_1_0_01_0_0_000_0_0_0 // bit 41 OR
		+ 0b10110_1_0_01_0_0_000_0_0_0 // bit 42 XOR
		+ 0b11001_1_0_01_0_0_000_0_0_0 // bit 43 XNOR
		+ 0b01000_1_0_01_0_0_000_0_0_0 // bit 44 SHL
		+ 0b01001_1_0_01_0_0_000_0_0_0 // bit 45 SHR
		+ 0b01011_1_0_01_0_0_000_0_0_0 // bit 46 SRA
		+ 0b00000_1_0_00_0_0_011_0_1_0 // bit 47
		+ 0b00000_1_1_01_0_0_000_0_0_0 // bit 48 ADDC
		+ 0b00001_1_1_01_0_0_000_0_0_0 // bit 49 SUBC
		+ 0b00000_1_0_00_0_0_011_0_1_0 // bit 50 MULC (not used)
		+ 0b00000_1_0_00_0_0_011_0_1_0 // bit 51 DIVC (not used)
		+ 0b00101_1_1_01_0_0_000_0_0_0 // bit 52 CMPEQC
		+ 0b00111_1_1_01_0_0_000_0_0_0 // bit 53 CMPLTC
		+ 0b01101_1_1_01_0_0_000_0_0_0 // bit 54 CMPLEC
		+ 0b00000_1_0_00_0_0_011_0_1_0 // bit 55
		+ 0b11000_1_1_01_0_0_000_0_0_0 // bit 56 ANDC
		+ 0b11110_1_1_01_0_0_000_0_0_0 // bit 57 ORC
		+ 0b10110_1_1_01_0_0_000_0_0_0 // bit 58 XORC
		+ 0b11001_1_1_01_0_0_000_0_0_0 // bit 59 XNORC
		+ 0b01000_1_1_01_0_0_000_0_0_0// bit 60 SHLC
		+ 0b01001_1_1_01_0_0_000_0_0_0// bit 61 SHRC
		+ 0b01011_1_1_01_0_0_000_0_0_0 // bit 62 SRAC
		+ 0b00000_1_0_00_0_0_011_0_1_0) // bit 64

Xwr_mux reset xwr 0 wr mux2

*beq opcode=0b011101 for bne, 0b011100 for beq
Xbeq op_c[5] k inverter
Xbeqa op_c[1] s inverter
Xbeqb k op_c[4] op_c[3] op_c[2] nm nand4
Xbeqc s op_c[0] nn nand2
Xbeqd m n no nand2
Xinv_a nm nn no m n o inverter

Xbnea op_c[0] p inverter
Xbneb p op_c[2] nq nand2
Xbnec m q nr nand2
Xz z t inverter
Xbeqe r o pc_calc[0] z t 0 pcsel[0] mux4
Xbeqf pc_calc[2:1] pcsel[2:1] buffer
Xinv_b nq nr q r inverter
 
.ends
